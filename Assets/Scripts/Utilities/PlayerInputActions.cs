//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Utilities/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""a5ee4ea4-e595-49fa-a57c-d5c1df2c0bcd"",
            ""actions"": [
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""989cdb7a-7829-42aa-8e2c-67ce366c27b4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PointAndClick"",
                    ""type"": ""Button"",
                    ""id"": ""7cfa49d8-8f1d-4dc3-8496-28983d6db7f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovementUI"",
                    ""type"": ""Value"",
                    ""id"": ""6ab26ac8-53ba-48f4-a33c-9576d3d16664"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchInputMode"",
                    ""type"": ""Button"",
                    ""id"": ""eb80c2fe-e744-43a5-84b1-b8107473397e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e7d04870-cff2-4d93-9773-3f63b629b6ca"",
                    ""path"": ""<Keyboard>/#(1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchInputMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6872c1f-b380-42d2-a054-d58c1c7c6246"",
                    ""path"": ""<Keyboard>/#(2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchInputMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bda62ab-5cce-4361-9adb-91eebd945703"",
                    ""path"": ""<Keyboard>/#(3)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchInputMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a227faf2-c2fc-496c-be5c-1e4f3db38da6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""4047dbdd-ea68-4df4-a6dc-d6c3131c848f"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""6c038107-72e3-433c-b857-e312d0a1bd3f"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""c5977f17-f66b-4ff8-96fa-97c0841ffc42"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""52a2e7b3-56a7-410f-8623-0add28302d90"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d2b7603e-b9e4-4796-8185-d14a2ad35e27"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointAndClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92492b4b-13ec-4641-bf78-c38ef7d69a33"",
                    ""path"": ""<AndroidGamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e9d4966-afaa-4a1c-888b-3553faed3fef"",
                    ""path"": ""<AndroidGamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerControllSchema"",
            ""bindingGroup"": ""PlayerControllSchema"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_WASD = m_PlayerMovement.FindAction("WASD", throwIfNotFound: true);
        m_PlayerMovement_PointAndClick = m_PlayerMovement.FindAction("PointAndClick", throwIfNotFound: true);
        m_PlayerMovement_MovementUI = m_PlayerMovement.FindAction("MovementUI", throwIfNotFound: true);
        m_PlayerMovement_SwitchInputMode = m_PlayerMovement.FindAction("SwitchInputMode", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_WASD;
    private readonly InputAction m_PlayerMovement_PointAndClick;
    private readonly InputAction m_PlayerMovement_MovementUI;
    private readonly InputAction m_PlayerMovement_SwitchInputMode;
    public struct PlayerMovementActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerMovementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @WASD => m_Wrapper.m_PlayerMovement_WASD;
        public InputAction @PointAndClick => m_Wrapper.m_PlayerMovement_PointAndClick;
        public InputAction @MovementUI => m_Wrapper.m_PlayerMovement_MovementUI;
        public InputAction @SwitchInputMode => m_Wrapper.m_PlayerMovement_SwitchInputMode;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @WASD.started += instance.OnWASD;
            @WASD.performed += instance.OnWASD;
            @WASD.canceled += instance.OnWASD;
            @PointAndClick.started += instance.OnPointAndClick;
            @PointAndClick.performed += instance.OnPointAndClick;
            @PointAndClick.canceled += instance.OnPointAndClick;
            @MovementUI.started += instance.OnMovementUI;
            @MovementUI.performed += instance.OnMovementUI;
            @MovementUI.canceled += instance.OnMovementUI;
            @SwitchInputMode.started += instance.OnSwitchInputMode;
            @SwitchInputMode.performed += instance.OnSwitchInputMode;
            @SwitchInputMode.canceled += instance.OnSwitchInputMode;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @WASD.started -= instance.OnWASD;
            @WASD.performed -= instance.OnWASD;
            @WASD.canceled -= instance.OnWASD;
            @PointAndClick.started -= instance.OnPointAndClick;
            @PointAndClick.performed -= instance.OnPointAndClick;
            @PointAndClick.canceled -= instance.OnPointAndClick;
            @MovementUI.started -= instance.OnMovementUI;
            @MovementUI.performed -= instance.OnMovementUI;
            @MovementUI.canceled -= instance.OnMovementUI;
            @SwitchInputMode.started -= instance.OnSwitchInputMode;
            @SwitchInputMode.performed -= instance.OnSwitchInputMode;
            @SwitchInputMode.canceled -= instance.OnSwitchInputMode;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);
    private int m_PlayerControllSchemaSchemeIndex = -1;
    public InputControlScheme PlayerControllSchemaScheme
    {
        get
        {
            if (m_PlayerControllSchemaSchemeIndex == -1) m_PlayerControllSchemaSchemeIndex = asset.FindControlSchemeIndex("PlayerControllSchema");
            return asset.controlSchemes[m_PlayerControllSchemaSchemeIndex];
        }
    }
    public interface IPlayerMovementActions
    {
        void OnWASD(InputAction.CallbackContext context);
        void OnPointAndClick(InputAction.CallbackContext context);
        void OnMovementUI(InputAction.CallbackContext context);
        void OnSwitchInputMode(InputAction.CallbackContext context);
    }
}
